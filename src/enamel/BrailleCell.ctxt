#BlueJ class context
comment0.params=
comment0.target=BrailleCell()
comment0.text=\n\ \n\ Class\ constructor.\ Initializes\ the\ <code>alphabet</code>\ HashMap\ to\ populate\ it\n\ with\ the\ appropriate\ alphabet,\ which\ in\ this\ case\ is\ the\ English\ alphabet,\n\ and\ the\ corresponding\ String\ representations\ of\ the\ braille\ cell.\n
comment1.params=
comment1.target=void\ initializeAlphabet()
comment1.text=\n\ Initializes\ the\ HashMap\ of\ our\ Braille\ alphabet,\ with\ the\ Key\ being\ the\ char\n\ English\ alphabet\ letter\ and\ the\ Value\ being\ the\ corresponding\ 8\ pins\ represented\n\ as\ String,\ with\ 1\ representing\ a\ raised\ pin\ and\ 0\ representing\ a\ lowered\ pin.\ \n
comment2.params=a
comment2.target=void\ displayCharacter(char)
comment2.text=\n\ Displays\ the\ character\ passed\ as\ argument\ on\ this\ Braille\ Cell\ object\ in\n\ Braille.\n\ <p>\n\ The\ method\ works\ by\ selecting\ specific\ booleans\ in\ <code>listOfPins</code>\ that\ represent\n\ raised\ "pins",\ or\ the\ parts\ of\ the\ letter\ that\ would\ be\ felt\ by\ a\ human\n\ hand,\ and\ setting\ it\ to\ true,\ while\ setting\ the\ "pins"\ that\ are\ not\n\ raised\ to\ false.\ \n\ \n\ @param\ a\n\ \t\t\tthe\ char\ letter\ to\ display.\n\ @throws\ InterruptedException\n\ \t\t\tif\ the\ argument\ is\ not\ within\ our\ alphabet\ of\ English\ letters.\n
comment3.params=pins
comment3.target=void\ setPins(java.lang.String)
comment3.text=\n\ Takes\ an\ eight\ character\ string\ of\ 1s\ and\ 0s\ as\ argument,\ and\ sets\ the\n\ the\ 8\ pins\ accordingly.\ 1\ corresponds\ to\ raising\ the\ pin,\ 0\ to\ lowering\ it.\n\ The\ first\ 3\ characters\ correspond\ to\ the\ top-left\ pin\ to\ the\n\ third\ from\ the\ top\ pin\ on\ the\ left\ side.\ The\ second\ 3\ characters\ correspond\ to\ the\ top-right\ \n\ pin\ to\ the\ third\ from\ the\ top\ pin\ on\ the\ right\ side.\ The\ last\ 2\ characters\ correspond\n\ to\ the\ bottom-left\ and\ the\ bottom-right\ pins.\ This\ arrangement\ is\ to\ support\ to\ the\n\ Metec\ B11\ Braille\ Cell's\ arrangement\ of\ the\ pins,\ which\ is\ arranged\ the\ same.\n\ \n\ @param\ pins\n\ \ \ \ \ \ \ \ \ \ \ \ string\ of\ 1s\ and\ 0s\ that\ is\ 8\ characters\ long\ that\ sets\ the\n\ \ \ \ \ \ \ \ \ \ \ \ state\ of\ the\ eight\ pins\ that\ form\ the\ cell\n\ @throws\ IllegalArgumentException\n\ \ \ \ \ \ \ \ \ \ \ \ \ if\ the\ string\ is\ not\ 8\ characters\ long\ or\ if\ it\ contains\ any\n\ \ \ \ \ \ \ \ \ \ \ \ \ character\ that\ isn't\ a\ 1\ or\ a\ 0\n
comment4.params=pin
comment4.target=void\ raiseOnePin(int)
comment4.text=\n\ Raises\ the\ pin\ that\ corresponds\ to\ the\ argument.\n\ \n\ @param\ pin\n\ \ \ \ \ \ \ \ \ \ \ \ the\ index\ of\ the\ pin\ to\ raise\n\ @throws\ IllegalArgumentException\n\ \ \ \ \ \ \ \ \ \ \ \ \ if\ the\ argument\ is\ not\ between\ 1\ and\ 8\ inclusive\n
comment5.params=pin
comment5.target=void\ lowerOnePin(int)
comment5.text=\n\ Lowers\ the\ pin\ that\ corresponds\ to\ the\ argument.\n\ \n\ @param\ pin\n\ \ \ \ \ \ \ \ \ \ \ \ the\ index\ of\ the\ pin\ to\ raise\n\ @throws\ IllegalArgumentException\n\ \ \ \ \ \ \ \ \ \ \ \ \ if\ the\ argument\ is\ not\ between\ 1\ and\ 8\ inclusive\n
comment6.params=
comment6.target=void\ clear()
comment6.text=\n\ Lowers\ all\ the\ pins\ in\ the\ cell.\n\ <p>\n\ This\ is\ equivalent\ to\ <code>\ displayLetter('\ ')\ </code>.\n
comment7.params=index
comment7.target=boolean\ getPinState(int)
comment7.text=\n\ Gets\ the\ pin's\ current\ state\ (raised\ or\ lowered)\ at\ the\ index\ that\ corresponds\ to\ the\ argument.\n\ \n\ @param\ index\n\ \t\t\tthe\ index\ of\ the\ pin\n\ @return\n\ \t\t\tthe\ pin's\ current\ state\n
comment8.params=
comment8.target=int\ getNumberOfPins()
comment8.text=\n\ Gets\ the\ braille\ cell's\ number\ of\ pins.\ This\ is\ to\ allow\ support\ for\ braille\ cells\ with\ 6\ pins\n\ in\ the\ future,\ while\ currently\ we\ are\ using\ the\ 8\ pin\ braille\ cell.\ \n\ @return\n\ \t\t\tthe\ number\ of\ pins\ in\ this\ BrailleCell\n
numComments=9

