#BlueJ class context
comment0.params=brailleCellNumber\ buttonNumber
comment0.target=Player(int,\ int)
comment0.text=\n\ Constructor\ for\ the\ Player\ abstract\ class,\ used\ by\ classes\ that\ extend\n\ this\ class.\ The\ constructor\ contains\ the\ basic\ implementation\ necessary\n\ for\ all\ Player\ subclasses,\ such\ as\ checking\ the\ validity\ of\ brailleCellNumber\ \n\ and\ buttonNumber\ (non-negative),\ as\ well\ as\ creating\ the\ specified\n\ number\ of\ BrailleCell\ objects\ and\ adding\ it\ to\ the\ <code>brailleList</code>\ List.\ \n\ \n\ @param\ brailleCellNumber\n\ \ \ \ \ \ \ \ \ \ \ \ the\ number\ of\ braille\ cells\ the\ Player\ should\ have\n\ @param\ buttonNumber\n\ \ \ \ \ \ \ \ \ \ \ \ the\ number\ of\ buttons\ the\ Player\ should\ have\n\ @throws\ IOException\ \n\ @throws\ SecurityException\ \n\ @throws\ IllegalArgumentException\n\ \ \ \ \ \ \ \ \ \ \ \ \ if\ one\ or\ both\ of\ the\ two\ parameters\ is\ negative\ or\ 0\n
comment1.params=record
comment1.target=java.lang.String\ format(java.util.logging.LogRecord)
comment2.params=index
comment2.target=BrailleCell\ getCell(int)
comment2.text=\n\ Returns\ a\ reference\ to\ the\ BrailleCell\ object\ at\ the\ index\ passed\ as\n\ argument.\ \n\ \n\ @param\ index\n\ \ \ \ \ \ \ \ \ \ \ \ the\ index\ of\ the\ BrailleCell\ object\ whose\ reference\ is\ to\ be\n\ \ \ \ \ \ \ \ \ \ \ \ returned\n\ @return\ reference\ to\ the\ BrailleCell\ object\ at\ the\ index\ passed\ as\n\ \ \ \ \ \ \ \ \ argument\n\ @throws\ IllegalArgumentException\n\ \ \ \ \ \ \ \ \ \ \ \ \ if\ the\ index\ is\ negative\ or\ equal\ to\ or\ bigger\ than\n\ \ \ \ \ \ \ \ \ \ \ \ \ brailleCellNumber\ (the\ number\ of\ Braille\ Cells\ initialized)\n
comment3.params=
comment3.target=void\ clearAllCells()
comment3.text=\n\ Clears\ all\ the\ Braille\ Cells,\ i.e\ lowers\ all\ the\ pins\ for\ all\ of\ them,\n\ effectively\ making\ them\ show\ nothing.\n
comment4.params=aString
comment4.target=void\ displayString(java.lang.String)
comment4.text=\n\ Displays\ the\ string\ passed\ as\ argument\ on\ all\ the\ Braille\ Cells.\ If\ the\n\ string\ is\ shorter\ than\ the\ total\ number\ of\ Braille\ Cells,\ the\ remaining\n\ cells\ are\ cleared.\ However,\ if\ the\ string\ is\ longer\ it\ only\ displays\ the\n\ part\ of\ it\ up\ to\ however\ many\ Braille\ Cells\ there\ are\ and\ ignores\ the\n\ rest.\n\ \n\ @param\ aString\n\ \ \ \ \ \ \ \ \ \ \ \ the\ String\ to\ be\ displayed\ on\ the\ BrailleCells\n
comment5.params=
comment5.target=void\ refresh()
comment5.text=\n\ An\ abstract\ method\ to\ refresh\ the\ current\ implementation's\ "display"\ of\ \n\ its\ BrailleCells,\ whether\ the\ display\ is\ audio,\ visual,\ or\ hardware,\ \n\ or\ other\ implementations\ that\ extend\ this\ class.\n
comment6.params=index\ param\ sp
comment6.target=void\ addSkipButtonListener(int,\ java.lang.String,\ ScenarioParser)
comment6.text=\n\ Adds\ a\ "Skip\ Button"\ for\ the\ ScenarioParser's\ class\ to\ continue\n\ processing\ text\ after\ the\ ScenarioParser's\ <code>userInput</code>\ is\n\ set\ to\ true.\ Changes\ <code>userInput</code>\ to\ false\ to\ allow\ the\n\ ScenarioParser\ to\ continue.\n\ @param\ index\n\ \t\t\tthe\ index\ of\ the\ button\ to\ add\ the\ listener\ to\n\ @param\ param\n\ \t\t\tthe\ String\ in\ ScenarioParser\ to\ skip\ to,\ needed\ for\ ScenarioParser's\ <code>skip(String\ indicator)</code>\n\ \t\t\tmethod\n\ @param\ sp\n\ \t\t\tthe\ reference\ to\ the\ current\ ScenarioParser\ object\n
comment7.params=index
comment7.target=void\ removeButtonListener(int)
comment7.text=\n\ Removes\ the\ Listener\ on\ the\ Button\ specified\ by\ the\ argument.\ \n\ @param\ index\n\ \t\t\tthe\ index\ of\ the\ button\n
comment8.params=index\ sp
comment8.target=void\ addRepeatButtonListener(int,\ ScenarioParser)
comment8.text=\n\ Adds\ a\ "Repeat\ Button"\ for\ the\ ScenarioParser's\ class\ to\ repeat\n\ the\ text.\n\ @param\ index\n\ \t\t\tthe\ index\ of\ the\ button\ to\ add\ the\ listener\ to\n\ @param\ sp\n\ \t\t\tthe\ reference\ to\ the\ current\ ScenarioParser\ object\n
numComments=9
