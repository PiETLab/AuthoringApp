#BlueJ class context
comment0.params=brailleCellNumber\ buttonNumber
comment0.target=TactilePlayer(int,\ int)
comment0.text=\n\ Initializes\ the\ GPIO\ pins\ for\ the\ single\ Metec\ B11\ braille\ cell,\ whose\ pins\ are\n\ specified\ in\ the\ fields\ <code>ON,\ DOUT,\ STROBE,\ and\ CLOCK</code>.\n\ The\ two\ parameters\ <code>brailleCellNumber</code>\ and\ <code>buttonNumber</code>\n\ should\ not\ exceed\ 1\ and\ 4,\ respectively,\ until\ future\ modifications\ to\n\ the\ code\ and\ the\ hardware\ are\ completed.\ Due\ to\ the\ limitations\ of\ the\n\ Raspberry\ Pi\ (specifically,\ that\ it\ has\ limited\ GPIO\ pins),\ this\ number\n\ will\ be\ limited.\ \n\ \n\ @param\ brailleCellNumber\n\ \ \ \ \ \ \ \ \ \ \ \ the\ number\ of\ braille\ cells\ the\ TactilePlayer\ should\ have\n\ @param\ buttonNumber\n\ \ \ \ \ \ \ \ \ \ \ \ the\ number\ of\ buttons\ the\ TactilePlayer\ should\ have\n\ @throws\ IOException\ \n\ @throws\ SecurityException\ \n\ @throws\ IllegalArgumentException\n\ \ \ \ \ \ \ \ \ \ \ \ \ if\ one\ or\ both\ of\ the\ two\ parameters\ is\ negative\ or\ 0,\n\ \ \ \ \ \ \ \ \ \ \ \ \ or\ if\ brailleCellNumber\ exceeds\ 1,\ or\ if\ buttonNumber\ exceeds\n\ \ \ \ \ \ \ \ \ \ \ \ \ 4.\n
comment1.params=index
comment1.target=com.pi4j.io.gpio.GpioPinDigitalInput\ getButton(int)
comment1.text=\n\ Returns\ a\ reference\ to\ the\ button\ at\ the\ index\ passed\ as\ argument.\ The\n\ main\ purpose\ of\ providing\ this\ method\ is\ so\ the\ client\ can\ add\n\ actionListeners\ to\ the\ button.\ Buttons\ are\ numbered\ from\ left\ to\ right,\ \n\ from\ 0\ to\ (buttonNumber-1),\ buttonNumber\n\ being\ the\ number\ of\ buttons\ initialized\ by\ the\ constructor.\n\ \n\ @param\ index\n\ \ \ \ \ \ \ \ \ \ \ \ the\ index\ of\ the\ button\ to\ be\ returned\n\ @return\ reference\ to\ the\ GpioPinDigitalInput\ object\ at\ the\ index\ passed\ as\ argument\n\ @throws\ IllegalArgumentException\n\ \ \ \ \ \ \ \ \ \ \ \ \ if\ the\ index\ is\ negative\ or\ equal\ to\ or\ bigger\ than\n\ \ \ \ \ \ \ \ \ \ \ \ \ buttonNumber\ (the\ number\ of\ buttons\ initialized)\n
comment2.params=
comment2.target=void\ refresh()
comment2.text=\n\ Refreshes\ the\ Metec\ B11\ braille\ cell\ to\ match\ the\ current\ state\ of\ the\ \n\ instantiated\ BrailleCell\ object.\ For\ the\ TactilePlayer\ class,\n\ this\ method\ calls\ a\ method\ of\ the\ GPIO\ library.\ \n\ low()\ turns\ off\ the\ GPIO\ pin,\ high()\ turns\ on\ the\ GPIO\ pin.\n\ To\ access\ all\ the\ pins\ on\ the\ braille\ cell,\ first,\ the\ STROBE\ must\ be\n\ turned\ off.\ Then,\ for\ each\ pin\ (for\ one\ braille\ cell,\ 8\ pins,\ two\ braille\ cells,\ 16),\ \n\ this\ method\ turns\ off\ the\ CLOCK,\ turns\ on/off\ the\ DOUT\ to\ match\ the\ BrailleCell\n\ object's\ current\ pin<b>(matching\ in\ reverse\ order)</b>,\ then\ turns\ on\ the\ CLOCK\ again.\ \n\ At\ the\ end\ of\ the\ loop,\ the\ STROBE\ must\ be\ turned\ back\ on,\ at\ which\ point\ the\ \n\ braille\ cell\ will\ display\ the\ pins.\n
comment3.params=index\ param\ sp
comment3.target=void\ addSkipButtonListener(int,\ java.lang.String,\ ScenarioParser)
comment3.text=\n\ Adds\ a\ Listener\ (which\ listens\ for\ GPIO\ pin\ interrupts)\ with\ the\ specified\ index\ passed\ as\ argument.\n\ The\ index\ must\ be\ between\ 0\ and\ buttonNumber.\n\ <p>\n\ The\ GPIO\ listener\ requires\ a\ parameter\ from\ the\ ScenarioParser\ class,\n\ needed\ for\ it\ to\ call\ <code>ScenarioParser.skip()</code>\ method\ as\ well\ as\ have\n\ access\ to\ the\ userInput\ field.\ Pressing\ this\ button\ will\ skip\ to\ the\n\ specified\ area\ in\ the\ scenario\ file.\ \n\ \n\ @param\ index\n\ \ \ \ \ \ \ \ \ \ \ \ the\ index\ of\ the\ Listener\ to\ be\ added\n\ @param\ param\n\ \ \ \ \ \ \ \ \ \ the\ String\ in\ ScenarioParser\ to\ skip\ to,\ needed\ for\ ScenarioParser's\ <code>skip(String\ indicator)</code>\n\ \ \ \ \ \ \ \ \ \ method\n\ @param\ sp\n\ \ \ \ \ \ \ \ \ \ the\ reference\ to\ the\ current\ ScenarioParser\ object\ \ \ \ \ \ \ \ \ \ \n
comment4.params=arg0
comment4.target=void\ handleGpioPinDigitalStateChangeEvent(com.pi4j.io.gpio.event.GpioPinDigitalStateChangeEvent)
comment5.params=index\ sp
comment5.target=void\ addRepeatButtonListener(int,\ ScenarioParser)
comment5.text=\n\ Adds\ a\ Listener\ (which\ listens\ for\ GPIO\ pin\ interrupts)\ with\ the\ specified\ index\ passed\ as\ argument.\n\ The\ index\ must\ be\ between\ 0\ and\ buttonNumber.\n\ <p>\ \ \n\ The\ GPIO\ listener\ requires\ a\ parameter\ from\ the\ ScenarioParser\ class,\n\ needed\ for\ it\ to\ call\ <code>ScenarioParser.repeatText()</code>\ method.\ \n\ Pressing\ this\ button\ will\ repeat\ the\ specified\ text\ in\ the\ scenario\ file.\ \n\ \n\ @param\ index\n\ \ \ \ \ \ \ \ \ \ \ \ the\ index\ of\ the\ Listener\ to\ be\ added\n\ @param\ sp\n\ \ \ \ \ \ \ \ \ \ the\ reference\ to\ the\ current\ ScenarioParser\ object\ \ \ \ \ \ \ \ \ \ \n
comment6.params=arg0
comment6.target=void\ handleGpioPinDigitalStateChangeEvent(com.pi4j.io.gpio.event.GpioPinDigitalStateChangeEvent)
comment7.params=index
comment7.target=void\ removeButtonListener(int)
comment7.text=\n\ Removes\ the\ Listener\ from\ the\ index\ of\ buttonList\ passed\ as\ argument.\ \n\ The\ index\ must\ be\ between\ 0\ and\ buttonNumber.\n\ \n\ @param\ index\n\ \ \ \ \ \ \ \ \ \ \ \ the\ index\ of\ the\ Listener\ to\ be\ removed.\n\ @throws\ IllegalArgumentException\n\ \ \ \ \ \ \ \ \ \ \ \ \ if\ the\ index\ is\ negative\ or\ equal\ to\ or\ bigger\ than\n\ \ \ \ \ \ \ \ \ \ \ \ \ buttonNumber\ (the\ number\ of\ buttons\ initialized)\n
numComments=8
